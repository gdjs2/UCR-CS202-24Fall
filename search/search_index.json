{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CS202 - Advanced Operating System - Lab Session - 24 Fall Basic Info Hi\ud83d\udc4b, welcome to the course page for CS202 Advanced Operating System, Fall 2024 for UC Riverside, whose lecture is hosted by Prof. Heng Yin . The laboratory section would be hosted by me, Zhaoqi Xiao. Although we do not have an official Lab Session , you can try getting most of the help you need to complete your project from this website as well as addition documents provided here, or, from office hours. BTW, the time for my office hours would be: Monday 2pm - 4pm @ Zoom Or @ WCH 110 by appointment with email The Composition of Laboratory Session We will have three projects in total for the Lab Session: System Call Implementation Modifying the Scheduler Threads Prior to (or some time after) each Lab release, I would publish an instruction to help you get start with. Please be sure to check this website in a timely manner. Lab Tutorial Lab 1: System Call Implementation Tutorial Additional Links Course websites","title":"CS202 - Advanced Operating System - Lab Session - 24 Fall"},{"location":"#cs202-advanced-operating-system-lab-session-24-fall","text":"","title":"CS202 - Advanced Operating System - Lab Session - 24 Fall"},{"location":"#basic-info","text":"Hi\ud83d\udc4b, welcome to the course page for CS202 Advanced Operating System, Fall 2024 for UC Riverside, whose lecture is hosted by Prof. Heng Yin . The laboratory section would be hosted by me, Zhaoqi Xiao. Although we do not have an official Lab Session , you can try getting most of the help you need to complete your project from this website as well as addition documents provided here, or, from office hours. BTW, the time for my office hours would be: Monday 2pm - 4pm @ Zoom Or @ WCH 110 by appointment with email","title":"Basic Info"},{"location":"#the-composition-of-laboratory-session","text":"We will have three projects in total for the Lab Session: System Call Implementation Modifying the Scheduler Threads Prior to (or some time after) each Lab release, I would publish an instruction to help you get start with. Please be sure to check this website in a timely manner.","title":"The Composition of Laboratory Session"},{"location":"#lab-tutorial","text":"Lab 1: System Call Implementation Tutorial","title":"Lab Tutorial"},{"location":"#additional-links","text":"Course websites","title":"Additional Links"},{"location":"lab-tutorials/lab1/","text":"Lab 1 - System Call Implementation Before Start Xv6 is an open-source project built by MIT. It is a simple Unix-like OS for educational purpose. It has its source code published on Github and it is still maintained from time to time nowadays. In order to keep the consistency of the files you pull down, you are required to clone the XV6 files from our forked repository . As you can notice to, we use a risc-v version of xv6 here. Most of modern laptops or PCs we use are based on X86-64 or ARM. Therefore, in order to run xv6, we need an emulator, which could provide a risc-v execution environment on our local machine. We would introduce some supplementary resources for you. Feel free to check them when you meet difficulties finishing your project. xv6 Tutorial Compile & Run Before you start modifying the code, you need to know how to compile and run the code of xv6. As we introduced before, we need a risc-v toolchain to compile the source code and a risc-v emulator to provide the execution environment. Prior to stepping into installing the risc-v toolchain and emulator, we would suggest you finishing this project on a Unix-like environment, which includes all Linux distribution (e.g., Ubuntu, Arch, ...), macOS and so on. If you are using Windows, you can have a Linux subsystem running on your local machine though Windows Subsystem Linux, WSL . In order to fulfill the some virtualization requirements, you should try WSL 2 instead of WSL. We would provide the tested command line & instructions based on a Ubuntu 24.04. For other Linux distribution and macOS, please refer to your own Package Management System (like pacman for arch and brew for macOS) for issues you may meet. Tools Run the following command in your command line: Debian or Ubuntu sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu Arch Linux sudo pacman -S riscv64-linux-gnu-binutils riscv64-linux-gnu-gcc riscv64-linux-gnu-gdb qemu-emulators-full","title":"Lab 1 - System Call Implementation"},{"location":"lab-tutorials/lab1/#lab-1-system-call-implementation","text":"","title":"Lab 1 - System Call Implementation"},{"location":"lab-tutorials/lab1/#before-start","text":"Xv6 is an open-source project built by MIT. It is a simple Unix-like OS for educational purpose. It has its source code published on Github and it is still maintained from time to time nowadays. In order to keep the consistency of the files you pull down, you are required to clone the XV6 files from our forked repository . As you can notice to, we use a risc-v version of xv6 here. Most of modern laptops or PCs we use are based on X86-64 or ARM. Therefore, in order to run xv6, we need an emulator, which could provide a risc-v execution environment on our local machine. We would introduce some supplementary resources for you. Feel free to check them when you meet difficulties finishing your project. xv6 Tutorial","title":"Before Start"},{"location":"lab-tutorials/lab1/#compile-run","text":"Before you start modifying the code, you need to know how to compile and run the code of xv6. As we introduced before, we need a risc-v toolchain to compile the source code and a risc-v emulator to provide the execution environment. Prior to stepping into installing the risc-v toolchain and emulator, we would suggest you finishing this project on a Unix-like environment, which includes all Linux distribution (e.g., Ubuntu, Arch, ...), macOS and so on. If you are using Windows, you can have a Linux subsystem running on your local machine though Windows Subsystem Linux, WSL . In order to fulfill the some virtualization requirements, you should try WSL 2 instead of WSL. We would provide the tested command line & instructions based on a Ubuntu 24.04. For other Linux distribution and macOS, please refer to your own Package Management System (like pacman for arch and brew for macOS) for issues you may meet.","title":"Compile &amp; Run"},{"location":"lab-tutorials/lab1/#tools","text":"Run the following command in your command line:","title":"Tools"},{"location":"lab-tutorials/lab1/#debian-or-ubuntu","text":"sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu","title":"Debian or Ubuntu"},{"location":"lab-tutorials/lab1/#arch-linux","text":"sudo pacman -S riscv64-linux-gnu-binutils riscv64-linux-gnu-gcc riscv64-linux-gnu-gdb qemu-emulators-full","title":"Arch Linux"}]}