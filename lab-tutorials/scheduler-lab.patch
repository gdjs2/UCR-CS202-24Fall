diff --git a/Makefile b/Makefile
index f8c820e..b2ce8c0 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/random.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -78,6 +79,13 @@ ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]nopie'),)
 CFLAGS += -fno-pie -nopie
 endif
 
+# Add lottery and stride scheduler
+ifeq ($(SCHEDULER), LOTTERY)
+	CFLAGS += -DSCHEDULER=LOTTERY
+else ifeq ($(SCHEDULER), STRIDE)
+	CFLAGS += -DSCHEDULER=STRIDE
+endif
+
 LDFLAGS = -z max-page-size=4096
 
 $K/kernel: $(OBJS) $K/kernel.ld $U/initcode
@@ -139,6 +147,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test_scheduler\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +169,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..03b3d6c 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            proc_set_tickets(int);
+int             getticks(int pid);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -187,3 +189,7 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+// random.c
+uint            random(void);
+void            srand(uint64);
\ No newline at end of file
diff --git a/kernel/param.h b/kernel/param.h
index 80ec6d3..f998f5d 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -12,4 +12,7 @@
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
 #define USERSTACK    1     // user stack pages
-
+#define STRIDE1      (1<<16)     // stride value for stride scheduling
+#define DEFAULT_TICKS (1<<10) // default time slice for stride scheduling
+#define LOTTERY      1 // lottery scheduling
+#define STRIDE       2 // stride scheduling
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..88ef59c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -124,6 +124,10 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->tickets = DEFAULT_TICKS;
+  p->stride = STRIDE1 / p->tickets;
+  p->pass = p->stride;
+  p->ticks = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -169,6 +173,10 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->tickets = 0;
+  p->stride = 0;
+  p->pass = 0;
+  p->ticks = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -441,6 +449,7 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+#if !defined(SCHEDULER) || (SCHEDULER != LOTTERY && SCHEDULER != STRIDE)
 void
 scheduler(void)
 {
@@ -464,6 +473,7 @@ scheduler(void)
         p->state = RUNNING;
         c->proc = p;
         swtch(&c->context, &p->context);
+        ++p->ticks;  // Increment the tick count for the process.
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
@@ -480,6 +490,26 @@ scheduler(void)
   }
 }
 
+#elif SCHEDULER == LOTTERY
+/**
+ * TODO: Implement the lottery scheduler.
+ */
+void
+scheduler(void)
+{
+
+}
+#elif SCHEDULER == STRIDE
+/**
+ * TODO: Implement the stride scheduler.
+ */
+void
+scheduler(void)
+{
+
+}
+#endif
+
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -693,3 +723,24 @@ procdump(void)
     printf("\n");
   }
 }
+
+void proc_set_tickets(int tickets) {
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->tickets = tickets;
+  p->stride = STRIDE1 / p->tickets;
+  release(&p->lock);
+}
+
+int getticks(int pid) {
+  struct proc *p;
+  for (p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->pid == pid) {
+      release(&p->lock);
+      return p->ticks;
+    }
+    release(&p->lock);
+  }
+  return -1;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..d5e5fc5 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,10 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  uint tickets;
+  uint stride;
+  uint pass;
+  uint ticks;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/random.c b/kernel/random.c
new file mode 100644
index 0000000..53334b0
--- /dev/null
+++ b/kernel/random.c
@@ -0,0 +1,12 @@
+#include "types.h"
+
+static uint64 seed = 1;
+
+uint random(void) {
+    seed = seed * 6364136223846793005ULL + 1;
+    return (seed >> 32) & 0x7fffffff;
+}
+
+void srand(uint64 new_seed) {
+    seed = new_seed;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..217a31b 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getticks(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]  sys_settickets,
+[SYS_getticks]    sys_getticks,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..19fc543 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,24 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork        1
+#define SYS_exit        2
+#define SYS_wait        3
+#define SYS_pipe        4
+#define SYS_read        5
+#define SYS_kill        6
+#define SYS_exec        7
+#define SYS_fstat       8
+#define SYS_chdir       9
+#define SYS_dup         10
+#define SYS_getpid      11
+#define SYS_sbrk        12
+#define SYS_sleep       13
+#define SYS_uptime      14
+#define SYS_open        15
+#define SYS_write       16
+#define SYS_mknod       17
+#define SYS_unlink      18
+#define SYS_link        19
+#define SYS_mkdir       20
+#define SYS_close       21
+#define SYS_settickets  22
+#define SYS_getticks    23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..e53385f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,23 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int tickets;
+  argint(0, &tickets);
+  if (tickets < 1) {
+    return -1;
+  }
+  proc_set_tickets(tickets);
+  return 0;
+}
+
+uint64
+sys_getticks(void)
+{
+  int pid;
+  argint(0, &pid);
+  return getticks(pid);
+}
\ No newline at end of file
diff --git a/user/test_scheduler.c b/user/test_scheduler.c
new file mode 100644
index 0000000..23dd138
--- /dev/null
+++ b/user/test_scheduler.c
@@ -0,0 +1,49 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+const int MAX_N_PROC = 1 << 5;
+const int MAX_TICKETS = 1 << 10;
+
+int main(int argc, char **argv) {
+    if (argc < 4) {
+        printf("Usage: %s [SLEEP_TIME in ms] [N_PROC] [TICKET1] [TICKET2]...\n", argv[0]);
+        exit(-1);
+    }
+    int sleep_time = atoi(argv[1]);
+    int n_proc = atoi(argv[2]);
+    if (n_proc > MAX_N_PROC) {
+        printf("Error: Maximum number of processes is %d (%d received)\n", MAX_N_PROC, n_proc);
+        exit(-1);
+    }
+    int tickets[MAX_N_PROC];
+    for (int i = 0; i < n_proc; i++) {
+        tickets[i] = atoi(argv[i + 3]);
+        if (tickets[i] < 1 || tickets[i] > MAX_TICKETS) {
+            printf("Error: Ticket value must be between 1 and %d (%d received)\n", MAX_TICKETS, tickets[i]);
+            exit(-1);
+        }
+    }
+
+    int *childs = malloc(n_proc * sizeof(int));
+    for (int i = 0; i < n_proc; ++i) {
+        int pid = fork();
+        if (pid == 0) {
+            // Child process
+            settickets(tickets[i]);
+            while (1) ; // Infinite loop to keep the child process running
+        } else if (pid > 0) {
+            // Parent process
+            childs[i] = pid;
+            printf("Created child process with PID: %d and tickets: %d\n", pid, tickets[i]);
+        } else {
+            printf("Error: Fork failed\n");
+            exit(-1);
+        }
+    }
+    sleep(sleep_time);
+    for (int i = 0; i < n_proc; ++i) {
+        printf("Child PID: %d, ticks spent: %d\n", childs[i], getticks(childs[i]));
+        kill(childs[i]);
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index f16fe27..f09d85b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getticks(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..86af7cb 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getticks");
\ No newline at end of file
